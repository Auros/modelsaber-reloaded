// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelSaber.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ModelSaber.Migrations
{
    [DbContext(typeof(ModelSaberContext))]
    partial class ModelSaberContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ModelSaber.Models.Discord.DiscordUser", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnName("avatar")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .HasColumnName("discriminator")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_discord_user");

                    b.ToTable("discord_user");
                });

            modelBuilder.Entity("ModelSaber.Models.Game.Game", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_games");

                    b.ToTable("games");
                });

            modelBuilder.Entity("ModelSaber.Models.Localization.LocalizationDatum", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .HasColumnName("locale")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_localization_table");

                    b.ToTable("localization_table");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.Model", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<long>("CollectionID")
                        .HasColumnName("collection_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DownloadURL")
                        .IsRequired()
                        .HasColumnName("download_url")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasColumnType("text");

                    b.Property<string>("InstallURL")
                        .HasColumnName("install_url")
                        .HasColumnType("text");

                    b.Property<bool>("IsVariation")
                        .HasColumnName("is_variation")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasColumnName("preview")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tags")
                        .HasColumnType("text[]")
                        .HasDefaultValue(new string[] {  });

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<long[]>("Variations")
                        .HasColumnName("variations")
                        .HasColumnType("bigint[]");

                    b.HasKey("ID")
                        .HasName("pk_models");

                    b.HasIndex("CollectionID")
                        .HasName("ix_models_collection_id");

                    b.ToTable("models");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.ModelCollection", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("IconURL")
                        .HasColumnName("icon_url")
                        .HasColumnType("text");

                    b.Property<string>("InstallPath")
                        .HasColumnName("install_path")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_model_collections");

                    b.ToTable("model_collections");
                });

            modelBuilder.Entity("ModelSaber.Models.User.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string[]>("ExternalProfiles")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("external_profiles")
                        .HasColumnType("text[]")
                        .HasDefaultValue(new string[] {  });

                    b.Property<string[]>("Permissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("permissions")
                        .HasColumnType("text[]")
                        .HasDefaultValue(new[] { "*.upload" });

                    b.Property<string>("ProfileID")
                        .HasColumnName("profile_id")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_users");

                    b.HasIndex("ProfileID")
                        .HasName("ix_users_profile_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.Model", b =>
                {
                    b.HasOne("ModelSaber.Models.Model.ModelCollection", "Collection")
                        .WithMany("Models")
                        .HasForeignKey("CollectionID")
                        .HasConstraintName("fk_models_model_collections_collection_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelSaber.Models.User.User", b =>
                {
                    b.HasOne("ModelSaber.Models.Discord.DiscordUser", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .HasConstraintName("fk_users_discord_user_profile_id");
                });
#pragma warning restore 612, 618
        }
    }
}
