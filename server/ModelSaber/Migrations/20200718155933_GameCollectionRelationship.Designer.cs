// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelSaber.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ModelSaber.Migrations
{
    [DbContext(typeof(ModelSaberContext))]
    [Migration("20200718155933_GameCollectionRelationship")]
    partial class GameCollectionRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ModelSaber.Models.Discord.DiscordUser", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnName("avatar")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .HasColumnName("discriminator")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_discord_user");

                    b.ToTable("discord_user");
                });

            modelBuilder.Entity("ModelSaber.Models.Game.Game", b =>
                {
                    b.Property<decimal>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("IconURL")
                        .HasColumnName("icon_url")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<int>("Visibility")
                        .HasColumnName("visibility")
                        .HasColumnType("integer");

                    b.HasKey("ID")
                        .HasName("pk_games");

                    b.ToTable("games");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.Model", b =>
                {
                    b.Property<decimal>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("CollectionID")
                        .HasColumnName("collection_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DownloadURL")
                        .IsRequired()
                        .HasColumnName("download_url")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasColumnType("text");

                    b.Property<string>("InstallURL")
                        .HasColumnName("install_url")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasColumnName("preview")
                        .HasColumnType("text");

                    b.Property<decimal?>("StatsID")
                        .HasColumnName("stats_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<List<string>>("Tags")
                        .HasColumnName("tags")
                        .HasColumnType("text[]");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("VariationOfID")
                        .HasColumnName("variation_of_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Visibility")
                        .HasColumnName("visibility")
                        .HasColumnType("integer");

                    b.HasKey("ID")
                        .HasName("pk_models");

                    b.HasIndex("CollectionID")
                        .HasName("ix_models_collection_id");

                    b.HasIndex("StatsID")
                        .HasName("ix_models_stats_id");

                    b.HasIndex("VariationOfID")
                        .HasName("ix_models_variation_of_id");

                    b.ToTable("models");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.ModelCollection", b =>
                {
                    b.Property<decimal>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("FileExtension")
                        .HasColumnName("file_extension")
                        .HasColumnType("text");

                    b.Property<decimal>("GameID")
                        .HasColumnName("game_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("IconURL")
                        .HasColumnName("icon_url")
                        .HasColumnType("text");

                    b.Property<string>("InstallPath")
                        .HasColumnName("install_path")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_model_collections");

                    b.HasIndex("GameID")
                        .HasName("ix_model_collections_game_id");

                    b.ToTable("model_collections");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.ModelStats", b =>
                {
                    b.Property<decimal>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Downloads")
                        .HasColumnName("downloads")
                        .HasColumnType("integer");

                    b.HasKey("ID")
                        .HasName("pk_model_stats");

                    b.ToTable("model_stats");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.Vote", b =>
                {
                    b.Property<decimal>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsUpvote")
                        .HasColumnName("is_upvote")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("ModelStatsID")
                        .HasColumnName("model_stats_id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("VoterID")
                        .HasColumnName("voter_id")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_vote");

                    b.HasIndex("ModelStatsID")
                        .HasName("ix_vote_model_stats_id");

                    b.HasIndex("VoterID")
                        .HasName("ix_vote_voter_id");

                    b.ToTable("vote");
                });

            modelBuilder.Entity("ModelSaber.Models.User.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<List<string>>("ExternalProfiles")
                        .HasColumnName("external_profiles")
                        .HasColumnType("text[]");

                    b.Property<string>("ProfileID")
                        .HasColumnName("profile_id")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("ID")
                        .HasName("pk_users");

                    b.HasIndex("ProfileID")
                        .HasName("ix_users_profile_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.Model", b =>
                {
                    b.HasOne("ModelSaber.Models.Model.ModelCollection", "Collection")
                        .WithMany("Models")
                        .HasForeignKey("CollectionID")
                        .HasConstraintName("fk_models_model_collections_collection_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelSaber.Models.Model.ModelStats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsID")
                        .HasConstraintName("fk_models_model_stats_stats_id");

                    b.HasOne("ModelSaber.Models.Model.Model", "VariationOf")
                        .WithMany()
                        .HasForeignKey("VariationOfID")
                        .HasConstraintName("fk_models_models_variation_of_id");
                });

            modelBuilder.Entity("ModelSaber.Models.Model.ModelCollection", b =>
                {
                    b.HasOne("ModelSaber.Models.Game.Game", "Game")
                        .WithMany("Collections")
                        .HasForeignKey("GameID")
                        .HasConstraintName("fk_model_collections_games_game_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelSaber.Models.Model.Vote", b =>
                {
                    b.HasOne("ModelSaber.Models.Model.ModelStats", null)
                        .WithMany("Votes")
                        .HasForeignKey("ModelStatsID")
                        .HasConstraintName("fk_vote_model_stats_model_stats_id");

                    b.HasOne("ModelSaber.Models.User.User", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterID")
                        .HasConstraintName("fk_vote_users_voter_id");
                });

            modelBuilder.Entity("ModelSaber.Models.User.User", b =>
                {
                    b.HasOne("ModelSaber.Models.Discord.DiscordUser", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .HasConstraintName("fk_users_discord_user_profile_id");
                });
#pragma warning restore 612, 618
        }
    }
}
